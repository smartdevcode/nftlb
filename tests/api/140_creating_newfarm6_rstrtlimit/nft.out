table ip nftlb {
	map nat-tcp-services {
		type ipv4_addr . inet_service : verdict
		elements = { 192.168.105.189 . 80 : goto nat-newfarm }
	}

	map tcp-services-back {
		type ipv4_addr . inet_service : ipv4_addr
	}

	map tcp-services-back-m {
		type mark : ipv4_addr
	}

	map filter-tcp-services {
		type ipv4_addr . inet_service : verdict
		elements = { 192.168.105.189 . 80 : goto filter-newfarm }
	}

	map nat-udp-services {
		type ipv4_addr . inet_service : verdict
		elements = { 192.168.105.189 . 53 : goto nat-newfarm6 }
	}

	map udp-services-back {
		type ipv4_addr . inet_service : ipv4_addr
	}

	map udp-services-back-m {
		type mark : ipv4_addr
	}

	map filter-udp-services {
		type ipv4_addr . inet_service : verdict
		elements = { 192.168.105.189 . 53 : goto filter-newfarm6 }
	}

	set rst-rtlimit-newfarm6 {
		type ipv4_addr
		size 65535
		flags dynamic
	}

	chain prerouting {
		type nat hook prerouting priority filter; policy accept;
		ip daddr . tcp dport vmap @nat-tcp-services
		ip daddr . udp dport vmap @nat-udp-services
	}

	chain postrouting {
		type nat hook postrouting priority srcnat; policy accept;
		ct mark 0x80000000/1 masquerade
		snat to ip daddr . tcp dport map @tcp-services-back
		snat to ct mark map @tcp-services-back-m
		snat to ip daddr . udp dport map @udp-services-back
		snat to ct mark map @udp-services-back-m
	}

	chain filter {
		type filter hook prerouting priority mangle; policy accept;
		meta mark set ct mark
		ip daddr . tcp dport vmap @filter-tcp-services
		ip daddr . udp dport vmap @filter-udp-services
	}

	chain filter-newfarm {
		tcp flags syn queue num 0 bypass
	}

	chain nat-newfarm {
	}

	chain filter-newfarm6 {
		ct state invalid log prefix "tcp-strict-newfarm6 " drop
		tcp flags rst add @rst-rtlimit-newfarm6 { ip saddr limit rate over 22/second } log prefix "rst-rtlimit-newfarm6 " drop
		ct state new ct mark 0x00000000 ct mark set 0x80000000
	}

	chain nat-newfarm6 {
	}
}
